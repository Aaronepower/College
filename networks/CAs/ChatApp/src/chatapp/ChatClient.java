package chatapp;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Iterator;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Main Client Swing for the application.
 *
 * @author Aaron
 */
public class ChatClient extends javax.swing.JFrame {

    private static Socket connection;
    static Thread readThread;
    static ObjectOutputStream output;

    /**
     * Creates new form InputField Settings here override the Generated
     * initComponents() method.
     */
    public ChatClient() {
        initComponents();
        chatMessages.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        usernameInputPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        usernameInputPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userInput = new javax.swing.JTextField();
        chatMessages = new javax.swing.JScrollPane();
        chatText = new javax.swing.JTextArea();
        enterButton = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
        usernameInputPane = new javax.swing.JScrollPane();
        usernameInput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userInputKeyPressed(evt);
            }
        });

        chatMessages.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        chatMessages.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        chatMessages.setFocusable(false);
        chatMessages.setNextFocusableComponent(userInput);

        chatText.setEditable(false);
        chatText.setColumns(20);
        chatText.setRows(5);
        chatMessages.setViewportView(chatText);

        enterButton.setText("Enter");
        enterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterButtonMouseClicked(evt);
            }
        });

        usernameLabel.setText("Username:");

        usernameInputPane.setViewportView(usernameInput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userInput)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 437, Short.MAX_VALUE)
                .addComponent(enterButton))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usernameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameInputPane, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(chatMessages)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(usernameInputPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(enterButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Calls sendMessageEvent on click.
     *
     * @param evt MouseEvent
     */
  private void enterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterButtonMouseClicked
      sendMessageEvent();
  }//GEN-LAST:event_enterButtonMouseClicked

    /**
     * Calls sendMessageEvent when the return key is pressed.
     *
     * @param evt KeyEvent
     */
    private void userInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userInputKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sendMessageEvent();
        }
    }//GEN-LAST:event_userInputKeyPressed

    /**
     * Connects the to the server, and inits ObjectOutputStream for
     * sendMessageEvent, and readThread which is put in the Swing event loop so
     * that that it doesn't start till the chatClient is visible.
     *
     * @param args String[] The command line arguments.
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        try {
            connection = new Socket("localhost", ChatServer.PORT);
            output = new ObjectOutputStream(connection.getOutputStream());
            readThread = new Thread(() -> {
                try {
                    ObjectInputStream input = new ObjectInputStream(connection.getInputStream());
                    while (true) {
                        Object obj = input.readObject();
                        chatText.setText("");
                        ConcurrentLinkedDeque deque = (ConcurrentLinkedDeque) obj;
                        Iterator it = deque.iterator();
                        while (it.hasNext()) {
                            Message message = (Message) it.next();
                            chatText.append(message.toString() + '\n');
                        }
                    }
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChatClient().setVisible(true);
            readThread.start();
        });
    }

    /**
     * Gets the username, and text, creates a new Message Object and writes that
     * object to the ObjectOutputStream.
     */
    private void sendMessageEvent() {
        String username = usernameInput.getText();
        String text = userInput.getText();

        Message message = new Message(username, text);
        try {
            output.writeObject(message);
        } catch (IOException ex) {
            Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        userInput.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane chatMessages;
    private static javax.swing.JTextArea chatText;
    private javax.swing.JButton enterButton;
    private javax.swing.JTextField userInput;
    private javax.swing.JTextField usernameInput;
    private javax.swing.JScrollPane usernameInputPane;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
