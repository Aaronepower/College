!function(t,i,e){"use strict";function a(){var i=t("#image-canvas")[0],e=t("canvas"),a=e.width(),s=e.height();o=new r,o.image=this,o.canvas=i,o.changeSize(this.width,this.height,a),o.y=Math.floor(s/2-o.height/2),o.x=Math.floor(a/2-o.width/2),o.draw(),t("#opacity-label").text("Opacity: 100%"),t(".setting").each(function(t,i){i.disabled=!1}).filter("#size").each(function(t,i){var e=this.width,a=o.width;i.min=.1*e,a>e?i.max=a:i.max=this.height,i.value=a,h(e,a)}.bind(this)).on("input",function(t){var i=t.target.value,e=o.width,a=o.height;o.changeSize(this.width,this.height,i),o.x-=n(o.width,e)/2,o.y-=n(o.height,a)/2,o.draw(),h(this.width,i)}.bind(this)).end().filter("#opacity").on("input",function(i){var e=i.target.value;t("#opacity-label").text("Opacity: "+Math.floor(100*e)+"%"),o.canvas.getContext("2d").globalAlpha=e,o.draw()}).end().filter("#filter").change(function(i){var e=t("#filter-canvas"),n=e[0].getContext("2d");n.fillStyle=i.target.value,n.fillRect(0,0,a,s)}).end().filter("#clear").click(function(){var i=t("#filter-canvas")[0].getContext("2d");i.clearRect(0,0,a,s)}).end().filter("#filter-opacity").each(function(i,e){t("#filter-canvas")[0].getContext("2d").globalAlpha=e.value,t("#filter-opacity-label").text("Colour Opacity "+Math.floor(100*e.value)+"%")}).on("input",function(i){var e=t("#filter-canvas"),n=e[0].getContext("2d");n.globalAlpha=i.target.value,n.clearRect(0,0,a,s),n.fillRect(0,0,a,s),t("#filter-opacity-label").text("Colour Opacity: "+Math.floor(100*i.target.value)+"%")})}function n(t,i){return t>i?Math.floor(t-i):Math.floor(-(i-t))}function h(i,e){var a=Math.floor(e/i*100);t("#size-label").text("size: "+a+"%")}function r(t){this.image=t,this.canvas=null,this.x=0,this.y=0,this.prevX=0,this.prevY=0,this.width=0,this.height=0}var o=new r,s=!1;t("canvas").each(function(i,e){var a=t(e);t(".canvas-container").height(a.parent().width()),e.width=a.parent().width(),e.height=a.parent().width()}).filter("#image-canvas").mousedown(function(){s=!0}).mouseup(function(){s=!1}).mousemove(function(t){o.image&&s&&(o.x+=n(t.clientX,o.prevX),o.y+=n(t.clientY,o.prevY),o.draw()),o.prevX=t.clientX,o.prevY=t.clientY}),t("#file").change(function(t){var i=t.target.files[0],e=new Image;e.onload=a,e.src=URL.createObjectURL(i)}),r.prototype.changeSize=function(t,i,e){if(e>t&&e>i)return this.width=this.image.width,void(this.height=this.image.height);var a=i/t,n=Math.ceil(a*e);if(n>e){var h=t/i,r=Math.ceil(h*e);this.width=r,this.height=e}else this.width=e,this.height=n},r.prototype.setPos=function(t,i){this.x=t,this.y=i},r.prototype.draw=function(i,e,a,n){i=i||this.x,e=e||this.y,a=a||this.width,n=n||this.height;var h=t(this.canvas),r=this.canvas.getContext("2d");r.clearRect(0,0,h.width(),h.height()),console.log(a,n),r.drawImage(this.image,i,e,a,n)};var c=function(i){return function(e){var a,n=t(".username").val(),h=t(".password").val();if("login"==i)a={username:n,password:h};else if("register"==i){var r=t(".confirm").val();if(confim!=h)return t("#error").val("passwords don't match."),!1;a={username:n,password:h,confirm:r}}return t.ajax({url:"/users/"+i,method:"POST",data:a,success:function(t){}}),!1}};t("#login").submit(c("login")),t("#register").submit(c("register"))}($,window,document);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbnZhcy5qcyIsImR5bmFtaWNJbWFnZS5qcyIsImZvcm1zLmpzIiwic2NyaXB0LmpzIl0sIm5hbWVzIjpbIiQiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm9uSW1hZ2VMb2FkIiwiY2FudmFzIiwiJGNhbnZhcyIsImNhbnZhc1dpZHRoIiwid2lkdGgiLCJjYW52YXNIZWlnaHQiLCJoZWlnaHQiLCJkeUltYWdlIiwiRHlJbWFnZSIsImltYWdlIiwidGhpcyIsImNoYW5nZVNpemUiLCJ5IiwiTWF0aCIsImZsb29yIiwieCIsImRyYXciLCJ0ZXh0IiwiZWFjaCIsIl8iLCJlbGVtZW50IiwiZGlzYWJsZWQiLCJmaWx0ZXIiLCJzaXplIiwiZFdpZHRoIiwibWluIiwibWF4IiwidmFsdWUiLCJjaGFuZ2VTaXplUGVyY2VudGFnZSIsImJpbmQiLCJvbiIsImV2ZW50IiwidGFyZ2V0Iiwib2xkV2lkdGgiLCJvbGRIZWlnaHQiLCJkaWZmIiwiZW5kIiwibmV3T3BhY2l0eSIsImdldENvbnRleHQiLCJnbG9iYWxBbHBoYSIsImNoYW5nZSIsImNvbnRleHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImNsaWNrIiwiY2xlYXJSZWN0IiwiYSIsImIiLCJpbWFnZVdpZHRoIiwiZHlJbWFnZVdpZHRoIiwicGVyY2VudGFnZSIsInByZXZYIiwicHJldlkiLCJpc01vdXNlZG93biIsImkiLCJwYXJlbnQiLCJtb3VzZWRvd24iLCJtb3VzZXVwIiwibW91c2Vtb3ZlIiwiY2xpZW50WCIsImNsaWVudFkiLCJmaWxlIiwiZmlsZXMiLCJJbWFnZSIsIm9ubG9hZCIsInNyYyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInByb3RvdHlwZSIsImFzcGVjdFJhdGlvIiwibmV3SGVpZ2h0IiwiY2VpbCIsIm5ld0FzcGVjdFJhdGlvIiwibmV3V2lkdGgiLCJzZXRQb3MiLCJjb25zb2xlIiwibG9nIiwiZHJhd0ltYWdlIiwic3VibWl0IiwiZm9ybVR5cGUiLCJkYXRhIiwidXNlcm5hbWUiLCJ2YWwiLCJwYXNzd29yZCIsImNvbmZpcm0iLCJjb25maW0iLCJhamF4IiwidXJsIiwibWV0aG9kIiwic3VjY2VzcyIsImFyZ3VtZW50Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxHQUNBLFlBa0NBLFNBQUFDLEtBQ0EsR0FBQUMsR0FBQUosRUFBQSxpQkFBQSxHQUNBSyxFQUFBTCxFQUFBLFVBQ0FNLEVBQUFELEVBQUFFLFFBQ0FDLEVBQUFILEVBQUFJLFFBRUFDLEdBQUEsR0FBQUMsR0FDQUQsRUFBQUUsTUFBQUMsS0FDQUgsRUFBQU4sT0FBQUEsRUFDQU0sRUFBQUksV0FBQUQsS0FBQU4sTUFBQU0sS0FBQUosT0FBQUgsR0FDQUksRUFBQUssRUFBQUMsS0FBQUMsTUFBQVQsRUFBQSxFQUFBRSxFQUFBRCxPQUFBLEdBQ0FDLEVBQUFRLEVBQUFGLEtBQUFDLE1BQUFYLEVBQUEsRUFBQUksRUFBQUgsTUFBQSxHQUNBRyxFQUFBUyxPQUVBbkIsRUFBQSxrQkFBQW9CLEtBQUEsaUJBR0FwQixFQUFBLFlBQUFxQixLQUFBLFNBQUFDLEVBQUFDLEdBQ0FBLEVBQUFDLFVBQUEsSUFHQUMsT0FBQSxTQUFBSixLQUFBLFNBQUFDLEVBQUFJLEdBQ0EsR0FBQW5CLEdBQUFNLEtBQUFOLE1BQ0FvQixFQUFBakIsRUFBQUgsS0FDQW1CLEdBQUFFLElBQUEsR0FBQXJCLEVBQ0FvQixFQUFBcEIsRUFDQW1CLEVBQUFHLElBQUFGLEVBRUFELEVBQUFHLElBQUFoQixLQUFBSixPQUVBaUIsRUFBQUksTUFBQUgsRUFDQUksRUFBQXhCLEVBQUFvQixJQUNBSyxLQUFBbkIsT0FBQW9CLEdBQUEsUUFBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUFELEVBQUFDLE9BQUFMLE1BQ0FNLEVBQUExQixFQUFBSCxNQUNBOEIsRUFBQTNCLEVBQUFELE1BRUFDLEdBQUFJLFdBQUFELEtBQUFOLE1BQUFNLEtBQUFKLE9BQUEwQixHQUNBekIsRUFBQVEsR0FBQW9CLEVBQUE1QixFQUFBSCxNQUFBNkIsR0FBQSxFQUNBMUIs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QXBGLEVBQUEsYUFBQXFGLE1BQ0FDLEVBQUF0RixFQUFBLGFBQUFxRixLQUVBLElBQUEsU0FBQUgsRUFFQUMsR0FBQUMsU0FBQUEsRUFDQUUsU0FBQUEsT0FHQSxJQUFBLFlBQUFKLEVBQUEsQ0FFQSxHQUFBSyxHQUFBdkYsRUFBQSxZQUFBcUYsS0FFQSxJQUFBRyxRQUFBRixFQUVBLE1BREF0RixHQUFBLFVBQUFxRixJQUFBLDJCQUNBLENBR0FGLElBQUFDLFNBQUFBLEVBQ0FFLFNBQUFBLEVBQ0FDLFFBQUFBLEdBY0EsTUFUQXZGLEdBQUF5RixNQUNBQyxJQUFBLFVBQUFSLEVBQ0FTLE9BQUEsT0FDQVIsS0FBQUEsRUFDQVMsUUFBQSxTQUFBQyxRQUtBLEdBSUE3RixHQUFBLFVBQUFpRixPQUFBQSxFQUFBLFVDaUxBakYsRUFBRSxhQUFhaUYsT0FBT0EsRUFBTyxjQUMxQmpGLEVBQUdDLE9BQVFDIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkeUltYWdlID0gbmV3IER5SW1hZ2UoKVxyXG4gICwgaXNNb3VzZWRvd24gPSBmYWxzZVxyXG5cclxuJCgnY2FudmFzJylcclxuLmVhY2goZnVuY3Rpb24gKGksIGNhbnZhcykge1xyXG4gICAgdmFyICRjYW52YXMgPSAkKGNhbnZhcylcclxuICAgICQoJy5jYW52YXMtY29udGFpbmVyJykuaGVpZ2h0KCRjYW52YXMucGFyZW50KCkud2lkdGgoKSlcclxuXHJcbiAgICBjYW52YXMud2lkdGggPSAkY2FudmFzLnBhcmVudCgpLndpZHRoKClcclxuICAgIGNhbnZhcy5oZWlnaHQgPSAkY2FudmFzLnBhcmVudCgpLndpZHRoKClcclxufSlcclxuLmZpbHRlcignI2ltYWdlLWNhbnZhcycpXHJcbi5tb3VzZWRvd24oZnVuY3Rpb24oKSB7aXNNb3VzZWRvd24gPSB0cnVlfSlcclxuLm1vdXNldXAoZnVuY3Rpb24oKSB7aXNNb3VzZWRvd24gPSBmYWxzZX0pXHJcbi5tb3VzZW1vdmUoZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBpZiAoZHlJbWFnZS5pbWFnZSAmJiBpc01vdXNlZG93bikge1xyXG5cclxuICAgICAgICBkeUltYWdlLnggKz0gZGlmZihldmVudC5jbGllbnRYLCBkeUltYWdlLnByZXZYKVxyXG4gICAgICAgIGR5SW1hZ2UueSArPSBkaWZmKGV2ZW50LmNsaWVudFksIGR5SW1hZ2UucHJldlkpXHJcbiAgICAgICAgZHlJbWFnZS5kcmF3KClcclxuICAgIH1cclxuXHJcbiAgICBkeUltYWdlLnByZXZYID0gZXZlbnQuY2xpZW50WFxyXG4gICAgZHlJbWFnZS5wcmV2WSA9IGV2ZW50LmNsaWVudFlcclxufSlcclxuXHJcbiQoJyNmaWxlJykuY2hhbmdlKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgdmFyIGZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF1cclxuICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpXHJcbiAgICBpbWFnZS5vbmxvYWQgPSBvbkltYWdlTG9hZFxyXG4gICAgaW1hZ2Uuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKVxyXG59KVxyXG5cclxuZnVuY3Rpb24gb25JbWFnZUxvYWQgKCkge1xyXG4gICAgdmFyIGNhbnZhcyA9ICQoJyNpbWFnZS1jYW52YXMnKVswXVxyXG4gICAgICAsICRjYW52YXMgPSAkKCdjYW52YXMnKVxyXG4gICAgICAsIGNhbnZhc1dpZHRoID0gJGNhbnZhcy53aWR0aCgpXHJcbiAgICAgICwgY2FudmFzSGVpZ2h0ID0gJGNhbnZhcy5oZWlnaHQoKVxyXG5cclxuICAgIGR5SW1hZ2UgPSBuZXcgRHlJbWFnZSgpXHJcbiAgICBkeUltYWdlLmltYWdlID0gdGhpc1xyXG4gICAgZHlJbWFnZS5jYW52YXMgPSBjYW52YXNcclxuICAgIGR5SW1hZ2UuY2hhbmdlU2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgY2FudmFzV2lkdGgpXHJcbiAgICBkeUltYWdlLnkgPSBNYXRoLmZsb29yKChjYW52YXNIZWlnaHQgLyAyKSAtIChkeUltYWdlLmhlaWdodCAvIDIpKVxyXG4gICAgZHlJbWFnZS54ID0gTWF0aC5mbG9vcigoY2FudmFzV2lkdGggLzIgKSAtIChkeUltYWdlLndpZHRoIC8gMikpXHJcbiAgICBkeUltYWdlLmRyYXcoKVxyXG5cclxuICAgICQoJyNvcGFjaXR5LWxhYmVsJykudGV4dCgnT3BhY2l0eTogMTAwJScpXHJcblxyXG4gICAgLy8gYWxsIGltYWdlIHNldHRpbmdzIGluaXRpYWxpc2F0aW9uIFxyXG4gICAgJCgnLnNldHRpbmcnKS5lYWNoKGZ1bmN0aW9uIChfLCBlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlXHJcbiAgICB9KVxyXG4gICAgLy8gTWFuaXB1bGF0aW5nIHRoZSBpbWFnZSdzIHNpemVcclxuICAgIC5maWx0ZXIoJyNzaXplJykuZWFjaChmdW5jdGlvbiAoXywgc2l6ZSkge1xyXG4gICAgICAgIHZhciB3aWR0aCAgPSB0aGlzLndpZHRoXHJcbiAgICAgICAgICAsIGRXaWR0aCA9IGR5SW1hZ2Uud2lkdGhcclxuICAgICAgICBzaXplLm1pbiA9IHdpZHRoICogMC4xXHJcbiAgICAgICAgaWYgKGRXaWR0aCA+IHdpZHRoKSB7XHJcbiAgICAgICAgICAgIHNpemUubWF4ID0gZFdpZHRoXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2l6ZS5tYXggPSB0aGlzLmhlaWdodFxyXG4gICAgICAgIH1cclxuICAgICAgICBzaXplLnZhbHVlID0gZFdpZHRoXHJcbiAgICAgICAgY2hhbmdlU2l6ZVBlcmNlbnRhZ2Uod2lkdGgsIGRXaWR0aClcclxuICAgIH0uYmluZCh0aGlzKSkub24oJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgLCBvbGRXaWR0aCA9IGR5SW1hZ2Uud2lkdGhcclxuICAgICAgICAgICwgb2xkSGVpZ2h0ID0gZHlJbWFnZS5oZWlnaHRcclxuXHJcbiAgICAgICAgZHlJbWFnZS5jaGFuZ2VTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0YXJnZXQpXHJcbiAgICAgICAgZHlJbWFnZS54IC09IGRpZmYoZHlJbWFnZS53aWR0aCwgb2xkV2lkdGgpICAgLyAyXHJcbiAgICAgICAgZHlJbWFnZS55IC09IGRpZmYoZHlJbWFnZS5oZWlnaHQsIG9sZEhlaWdodCkgLyAyXHJcbiAgICAgICAgZHlJbWFnZS5kcmF3KClcclxuXHJcbiAgICAgICAgY2hhbmdlU2l6ZVBlcmNlbnRhZ2UodGhpcy53aWR0aCwgdGFyZ2V0KVxyXG4gICAgfS5iaW5kKHRoaXMpKVxyXG4gICAgLy8gTWFuaXB1bGF0aW5nIHRoZSBpbWFnZSdzXHJcbiAgICAuZW5kKCkuZmlsdGVyKCcjb3BhY2l0eScpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBuZXdPcGFjaXR5ID0gZXZlbnQudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgJCgnI29wYWNpdHktbGFiZWwnKS50ZXh0KCdPcGFjaXR5OiAnICsgTWF0aC5mbG9vcihuZXdPcGFjaXR5ICogMTAwKSArICclJylcclxuICAgICAgICBkeUltYWdlLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmdsb2JhbEFscGhhID0gbmV3T3BhY2l0eVxyXG4gICAgICAgIGR5SW1hZ2UuZHJhdygpXHJcbiAgICB9KVxyXG4gICAgLy8gTWFuaXB1bGF0aW5nIHRoZSBpbWFnZSdzIGZpbHRlclxyXG4gICAgLmVuZCgpLmZpbHRlcignI2ZpbHRlcicpLmNoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgJGNhbnZhcyA9ICQoJyNmaWx0ZXItY2FudmFzJylcclxuICAgICAgICAgICwgY29udGV4dCA9ICRjYW52YXNbMF0uZ2V0Q29udGV4dCgnMmQnKVxyXG5cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodClcclxuICAgIH0pXHJcbiAgICAvLyBNYW5pcHVsYXRpbmcgdGhlIGZpbHRlciBjbGVhciBidXR0b25cclxuICAgIC5lbmQoKS5maWx0ZXIoJyNjbGVhcicpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gJCgnI2ZpbHRlci1jYW52YXMnKVswXS5nZXRDb250ZXh0KCcyZCcpXHJcbiAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodClcclxuICAgIH0pXHJcbiAgICAvLyBNYW5pcHVsYXRpbmcgdGhlIGltYWdlJ3MgZmlsdGVyJ3Mgb3BhY2l0eVxyXG4gICAgLmVuZCgpLmZpbHRlcignI2ZpbHRlci1vcGFjaXR5JykuZWFjaChmdW5jdGlvbiAoXywgZmlsdGVyKSB7IFxyXG4gICAgICAgICQoJyNmaWx0ZXItY2FudmFzJylbMF0uZ2V0Q29udGV4dCgnMmQnKS5nbG9iYWxBbHBoYSA9IGZpbHRlci52YWx1ZVxyXG4gICAgICAgICQoJyNmaWx0ZXItb3BhY2l0eS1sYWJlbCcpLnRleHQoJ0NvbG91ciBPcGFjaXR5ICcgKyBNYXRoLmZsb29yKGZpbHRlci52YWx1ZSAqIDEwMCkrJyUnKVxyXG5cclxuICAgIH0pLm9uKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciAkY2FudmFzID0gJCgnI2ZpbHRlci1jYW52YXMnKVxyXG4gICAgICAgICAgLCBjb250ZXh0ID0gJGNhbnZhc1swXS5nZXRDb250ZXh0KCcyZCcpXHJcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpXHJcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KVxyXG4gICAgICAgICQoJyNmaWx0ZXItb3BhY2l0eS1sYWJlbCcpLnRleHQoJ0NvbG91ciBPcGFjaXR5OiAnKyBNYXRoLmZsb29yKGV2ZW50LnRhcmdldC52YWx1ZSAqIDEwMCkrJyUnKVxyXG4gICAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gZGlmZiAoYSwgYikge1xyXG4gICAgaWYgKGEgPiBiKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoYSAtIGIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKC0oYiAtIGEpKVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VTaXplUGVyY2VudGFnZSAoaW1hZ2VXaWR0aCwgZHlJbWFnZVdpZHRoKSB7XHJcbiAgICB2YXIgcGVyY2VudGFnZSA9IE1hdGguZmxvb3IoKGR5SW1hZ2VXaWR0aCAvIGltYWdlV2lkdGgpICogMTAwKVxyXG4gICAgJCgnI3NpemUtbGFiZWwnKS50ZXh0KCdzaXplOiAnICsgcGVyY2VudGFnZSArICclJylcclxufSIsImZ1bmN0aW9uIER5SW1hZ2UgKGltYWdlKSB7XHJcblx0dGhpcy5pbWFnZSA9IGltYWdlXHJcblx0dGhpcy5jYW52YXMgPSBudWxsXHJcblx0dGhpcy54ID0gMFxyXG5cdHRoaXMueSA9IDBcclxuXHR0aGlzLnByZXZYID0gMFxyXG5cdHRoaXMucHJldlkgPSAwXHJcblx0dGhpcy53aWR0aCA9IDBcclxuXHR0aGlzLmhlaWdodCA9IDBcclxufVxyXG5cclxuRHlJbWFnZS5wcm90b3R5cGUuY2hhbmdlU2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCB0YXJnZXQpIHtcclxuXHRpZiAodGFyZ2V0ID4gd2lkdGggJiYgdGFyZ2V0ID4gaGVpZ2h0KSB7XHJcblx0XHR0aGlzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aFxyXG5cdFx0dGhpcy5oZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodFxyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0dmFyIGFzcGVjdFJhdGlvID0gaGVpZ2h0IC8gd2lkdGhcclxuXHQgICwgbmV3SGVpZ2h0ICAgPSBNYXRoLmNlaWwoYXNwZWN0UmF0aW8gKiB0YXJnZXQpXHJcblxyXG5cdGlmIChuZXdIZWlnaHQgPiB0YXJnZXQpIHtcclxuXHRcdHZhciBuZXdBc3BlY3RSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0XHJcblx0XHQgICwgbmV3V2lkdGggPSBNYXRoLmNlaWwobmV3QXNwZWN0UmF0aW8gKiB0YXJnZXQpXHJcblxyXG5cdFx0dGhpcy53aWR0aCA9IG5ld1dpZHRoXHJcblx0XHR0aGlzLmhlaWdodCA9IHRhcmdldFxyXG5cdFxyXG5cdH0gZWxzZSB7XHJcblx0XHR0aGlzLndpZHRoID0gdGFyZ2V0XHJcblx0XHR0aGlzLmhlaWdodCA9IG5ld0hlaWdodFxyXG5cdH1cclxufVxyXG5cclxuRHlJbWFnZS5wcm90b3R5cGUuc2V0UG9zID0gZnVuY3Rpb24oeCwgeSkge1xyXG5cdHRoaXMueCA9IHhcclxuXHR0aGlzLnkgPSB5XHJcbn1cclxuXHJcbkR5SW1hZ2UucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XHJcblx0eCA9IHggfHwgdGhpcy54XHJcblx0eSA9IHkgfHwgdGhpcy55XHJcblx0d2lkdGggPSB3aWR0aCB8fCB0aGlzLndpZHRoXHJcblx0aGVpZ2h0ID0gaGVpZ2h0IHx8IHRoaXMuaGVpZ2h0XHJcblxyXG5cdHZhciAkY2FudmFzID0gJCh0aGlzLmNhbnZhcylcclxuXHQgICwgY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJylcclxuICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsICRjYW52YXMud2lkdGgoKSwgJGNhbnZhcy5oZWlnaHQoKSlcclxuICAgIGNvbnNvbGUubG9nKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgeCwgeSwgd2lkdGgsIGhlaWdodClcclxufTsiLCJcclxuLy8gQFRPRE8gZG9jdW1lbnRhdGlvblxyXG52YXIgc3VibWl0ID0gZnVuY3Rpb24oZm9ybVR5cGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgZGF0YVxyXG4gICAgICAgICAgLCB1c2VybmFtZSA9ICQoJy51c2VybmFtZScpLnZhbCgpXHJcbiAgICAgICAgICAsIHBhc3N3b3JkID0gJCgnLnBhc3N3b3JkJykudmFsKClcclxuXHJcbiAgICAgICAgaWYgKGZvcm1UeXBlID09ICdsb2dpbicpIHtcclxuXHJcbiAgICAgICAgICAgIGRhdGEgPSB7IHVzZXJuYW1lOiB1c2VybmFtZVxyXG4gICAgICAgICAgICAgICAgICAgLCBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIGlmKGZvcm1UeXBlID09ICdyZWdpc3RlcicpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb25maXJtID0gJCgnLmNvbmZpcm0nKS52YWwoKVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbmZpbSAhPSBwYXNzd29yZCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI2Vycm9yJykudmFsKCdwYXNzd29yZHMgZG9uXFwndCBtYXRjaC4nKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRhdGEgPSB7IHVzZXJuYW1lIDogdXNlcm5hbWVcclxuICAgICAgICAgICAgICAgICAgICwgcGFzc3dvcmQgOiBwYXNzd29yZFxyXG4gICAgICAgICAgICAgICAgICAgLCBjb25maXJtIDogY29uZmlybVxyXG4gICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogJy91c2Vycy8nK2Zvcm1UeXBlLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGFyZ3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBib2R5Li4uXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC8vIElzIHRoZSBzYW1lIGluIGpRdWVyeSBhcyBoYXZpbmcgYm90aCBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGFuZCBldmVudC5zdG9wUHJvcGdhdGlvbigpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbn1cclxuXHJcbiQoJyNsb2dpbicpLnN1Ym1pdChzdWJtaXQoJ2xvZ2luJykpXHJcblxyXG4kKCcjcmVnaXN0ZXInKS5zdWJtaXQoc3VibWl0KCdyZWdpc3RlcicpKSIsbnVsbF0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
