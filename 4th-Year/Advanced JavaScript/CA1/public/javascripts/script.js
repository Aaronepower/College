!function(t,e,a){"use strict";function i(){var a=t("#image-canvas")[0],i=t("canvas"),s=i.width(),c=i.height();l=new o,l.image=this,l.canvas=a,l.changeSize(this.width,this.height,s),l.y=Math.floor(c/2-l.height/2),l.x=Math.floor(s/2-l.width/2),l.draw(),t("#opacity-label").text("Opacity: 100%"),t(".setting").each(function(t,e){e.disabled=!1}).filter("#size").each(function(t,e){var a=this.width,i=l.width;e.min=.1*a,i>a?e.max=i:e.max=this.height,e.value=i,r("#size-label","size: ",this.width/i)}.bind(this)).on("input",function(t){var e=t.target.value,a=l.width,i=l.height;l.changeSize(this.width,this.height,e),l.x-=n(l.width,a)/2,l.y-=n(l.height,i)/2,l.draw(),r("#size-label","size: ",e/this.width)}.bind(this)).end().filter("#opacity").on("input",function(e){var a=e.target.value;t("#opacity-label").text("Opacity: "+Math.floor(100*a)+"%"),l.canvas.getContext("2d").globalAlpha=a,l.draw()}).end().filter("#filter").change(function(e){var a=t("#filter-canvas"),i=a[0].getContext("2d");i.fillStyle=e.target.value,i.fillRect(0,0,s,c)}).end().filter("#clear").click(function(){var e=t("#filter-canvas")[0].getContext("2d");e.clearRect(0,0,s,c)}).end().filter("#filter-opacity").each(function(e,a){var i=a.value;t("#filter-canvas")[0].getContext("2d").globalAlpha=i,r("#filter-opacity-label","Colour Opacity: ",i)}).on("input",function(e){var a=t("#filter-canvas"),i=a[0].getContext("2d"),n=e.target.value;i.globalAlpha=n,i.clearRect(0,0,s,c),i.fillRect(0,0,s,c),r("#filter-opacity-label","Colour Opacity: ",n)}).end().filter("#upload").click(function(){for(var a=t(".canvas"),i=t("#hidden-canvas")[0],n=i.getContext("2d"),r=0;r<a.length;r++)n.drawImage(a[r],0,0);var o=i.toDataURL(),s=localStorage.getItem("user"),l=t("#tags").val().replace(/ /g,"").split(",").filter(Boolean);t.ajax({url:"/users/"+s,method:"POST",data:{image:o,tags:l},success:function(){e.location="/"}})})}function n(t,e){return t>e?Math.floor(t-e):Math.floor(-(e-t))}function r(e,a,i){var n=Math.floor(100*i);t(e).text(a+n+"%")}function o(t){this.image=t,this.canvas=null,this.x=0,this.y=0,this.prevX=0,this.prevY=0,this.width=0,this.height=0}function s(e,a){var i=localStorage.getItem("user");i?t.ajax({url:"/users/validate",method:"POST",data:{id:i},error:e,success:a}):e()}var l=new o,c=!1;t("canvas").each(function(e,a){var i=t(a);t(".canvas-container").height(i.parent().width()),a.width=i.parent().width(),a.height=i.parent().width()}).filter("#image-canvas").mousedown(function(){c=!0}).mouseup(function(){c=!1}).mousemove(function(t){l.image&&c&&(l.x+=n(t.clientX,l.prevX),l.y+=n(t.clientY,l.prevY),l.draw()),l.prevX=t.clientX,l.prevY=t.clientY}),t("#file").change(function(t){var e=t.target.files[0],a=new Image;a.onload=i,a.src=URL.createObjectURL(e)}),o.prototype.changeSize=function(t,e,a){if(a>t&&a>e)return this.width=this.image.width,void(this.height=this.image.height);var i=e/t,n=Math.ceil(i*a);if(a>n){var r=t/e,o=Math.ceil(r*a);this.width=o,this.height=a}else this.width=a,this.height=n},o.prototype.setPos=function(t,e){this.x=t,this.y=e},o.prototype.draw=function(e,a,i,n){e=e||this.x,a=a||this.y,i=i||this.width,n=n||this.height;var r=t(this.canvas),o=this.canvas.getContext("2d");o.clearRect(0,0,r.width(),r.height()),o.drawImage(this.image,e,a,i,n)},t("#register").click(function(a){a.preventDefault(),a.stopPropagation();var i,n=t(".username").val(),r=t(".password").val(),o=t(".confirm").val();o!=r&&t("#error").val("passwords don't match."),i={username:n,password:r,confirm:o},t.ajax({url:"/users/register",method:"POST",data:i,success:function(t){localStorage.setItem("user",t),e.location="/"},error:function(){console.log(arguments),t("#error").val("Error registering")}})}),t("#login").click(function(a){a.preventDefault(),a.stopPropagation();var i,n=t(".username").val(),r=t(".password").val();i={username:n,password:r},t.ajax({url:"/users/login",method:"POST",data:i,success:function(t){localStorage.setItem("user",t),e.location="/"},error:function(){t("#error").val("No user with that username, or password exists.")}})}),t(".image").click(function(e){var a=t(e.target),i=a.data("tags").replace(/ /g,"").split(",").filter(Boolean);t("#tag-listing").empty(),i.forEach(function(e){t("#tag-listing").append('<a class="twelve columns" href="/tags/'+e+'"><h4>'+e+"</h4></a>")})}),s(function(){t("#upload-button").remove()},function(){t("#user-buttons").remove()})}($,window,document);
//# sourceMappingURL=data:application/json;base64,
